import * as xml2js from 'xml2js'

interface ExportPage {
  title: string
  slug: string
  menu?: string | null
  submenu?: string | null
  metaDescription?: string | null
  keywords?: string | null
  contentType: string
  priority: string
  content?: string | null
}

interface ExportProject {
  name: string
  pages: ExportPage[]
  theme?: {
    name: string
    colors?: {
      primary: string
      secondary: string
      accent: string
    }
    fonts?: {
      heading: string
      body: string
    }
  }
}

export function generateWordPressXML(project: ExportProject): string {
  const now = new Date()
  const wpDate = now.toISOString().replace('T', ' ').replace(/\.\d{3}Z$/, '')

  const rss = {
    rss: {
      $: {
        version: '2.0',
        'xmlns:excerpt': 'http://wordpress.org/export/1.2/excerpt/',
        'xmlns:content': 'http://purl.org/rss/1.0/modules/content/',
        'xmlns:wfw': 'http://wellformedweb.org/CommentAPI/',
        'xmlns:dc': 'http://purl.org/dc/elements/1.1/',
        'xmlns:wp': 'http://wordpress.org/export/1.2/'
      },
      channel: [{
        title: [project.name],
        link: ['https://example.com'],
        description: [`${project.name} - Generated by Website Builder`],
        pubDate: [now.toUTCString()],
        language: ['en-US'],
        'wp:wxr_version': ['1.2'],
        'wp:base_site_url': ['https://example.com'],
        'wp:base_blog_url': ['https://example.com'],
        generator: ['Website Builder 3.0'],
        'wp:author': [{
          'wp:author_id': [1],
          'wp:author_login': ['admin'],
          'wp:author_email': ['admin@example.com'],
          'wp:author_display_name': ['Admin'],
          'wp:author_first_name': [''],
          'wp:author_last_name': ['']
        }],
        item: project.pages.map((page, index) => ({
          title: [page.title],
          link: [`https://example.com/${page.slug}/`],
          pubDate: [now.toUTCString()],
          'dc:creator': ['admin'],
          guid: [{
            _: `https://example.com/?page_id=${index + 1}`,
            $: { isPermaLink: 'false' }
          }],
          description: [page.metaDescription || ''],
          'content:encoded': [page.content || '<p>Content pending generation.</p>'],
          'excerpt:encoded': [page.metaDescription || ''],
          'wp:post_id': [index + 1],
          'wp:post_date': [wpDate],
          'wp:post_date_gmt': [wpDate],
          'wp:post_modified': [wpDate],
          'wp:post_modified_gmt': [wpDate],
          'wp:comment_status': ['closed'],
          'wp:ping_status': ['closed'],
          'wp:post_name': [page.slug],
          'wp:status': ['publish'],
          'wp:post_parent': [0],
          'wp:menu_order': [index],
          'wp:post_type': [page.contentType || 'page'],
          'wp:post_password': [''],
          'wp:is_sticky': [0],
          'wp:postmeta': [
            ...(page.metaDescription ? [{
              'wp:meta_key': ['_yoast_wpseo_metadesc'],
              'wp:meta_value': [page.metaDescription]
            }] : []),
            ...(page.keywords ? [{
              'wp:meta_key': ['_yoast_wpseo_focuskw'],
              'wp:meta_value': [page.keywords.split(',')[0].trim()]
            }] : [])
          ]
        }))
      }]
    }
  }

  const builder = new xml2js.Builder({
    xmldec: { version: '1.0', encoding: 'UTF-8' },
    renderOpts: {
      pretty: true,
      indent: '  '
    },
    cdata: true
  })

  return builder.buildObject(rss)
}